* CHANGES MADE TO dormant.sh:
- Added functions to send email + email format 
- Added function to see user accounts that are about to be dormant + emails that have been send under the generated report

FOLLOW THESE STEPS :
(scroll below to see all script(s) mentioned)

In Linux  :
# sudo -i (login as root)
# apt install sendemail
# apt install libio-socket-ssl-perl (this one may be optional as you only need it if you encounter an error with the email but you can just install it now)

In your own machine :
1. Go to your own google account
2. Enable 2 step verification
3. Go to App passwords
4. Create an App password (put any name you like)
5. Save the 16 letter code somewhere before closing (notes app)

In Linux :
(I do not think flask is needed as of now for the email to be sent so DO NOT COPY unless needed, I'm just putting it here for now)
# apt update
# apt install python3-pip -y (not sure if this is needed because it wasnt used(?). It was meant to be used to install flask but I used python3 in the end so...)
# apt install python3-flask 
# vim server.py 
# python3 server.py

(Copy this)
# vim /etc/user_emails.conf
* This email function ONLY works if the account is 7 DAYS before the dormancy period is up.
  This is because users are only given a week to respond before their accounts get deactivated.
  Ensure that the user account you are using to test the function is 7 days before deactivation. 
  (eg. dormancy period is 70 days and user01 & user02 are 63 days inactive)
Inside /etc/user_emails.conf :
user01=yuxuanpeck@gmail.com (replace with your own email)
user02=yuxuanpeck@gmail.com 
.
.
.

# vim dormant.sh
* After copy and pasting the script, do make the following changes to these parts :
- your_email@gmail.com -> replace with your own email aka sender account
- your_app_password -> replace with the app password that is from the sender account

 sendemail -f your_email@gmail.com \
              -t "$email" \
              -u "$subject" \
              -m "$body" \
              -s smtp.gmail.com:587 \
              -o tls=yes -xu your_email@gmail.com -xp your_app_password

* (talking about the script) The local server is supposedly linked to the flask tool but it is 
  technically not needed as I am not done with linking the response (yes/no functions) to the 
  deactivation of the account. I will be using another method to try and get the response to link 
  back to the Linux VM so just ignore that chunk of script!


dormant.sh (UPDATED):
#!/bin/bash

# Load configuration
source /etc/dormant.conf

# Email config file
EMAIL_CONFIG_FILE="/etc/user_emails.conf"
if [[ -f "$EMAIL_CONFIG_FILE" ]]; then
    source "$EMAIL_CONFIG_FILE"
fi

get_user_email() {
    local user=$1
    grep "^${user}=" "$EMAIL_CONFIG_FILE" 2>/dev/null | cut -d'=' -f2
}

send_email_to_user() {
    local user=$1
    local email=$2
    local days_inactive=$3
    local server_url="http://localhost:8080"  # Change to public IP or ngrok URL if needed

    local confirm_url="${server_url}/confirm?user=${user}&response=yes"
    local deny_url="${server_url}/confirm?user=${user}&response=no"

    local subject="⚠️ Your account will be deactivated in 7 days"
    local body="Hi $user,\n\nOur records show your account has been inactive for $days_inactive days.\n\nYour account will be deactivated in 7 days if no action is taken.\n\nWould you like to keep your account?\n\nYES: $confirm_url\nNO: $deny_url\n\nThank you."

    sendemail -f your_email@gmail.com \
              -t "$email" \
              -u "$subject" \
              -m "$body" \
              -s smtp.gmail.com:587 \
              -o tls=yes -xu your_email@gmail.com -xp your_app_password
}

# Validate config values
if [ -z "$DORMANT_USERACCOUNT_DURATION" ] || [ -z "$DORMANT_SERVICEACCOUNT_DURATION" ] || [ -z "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
    echo "Error: Config file missing required parameters."
    exit 1
fi

check_user_account() {
    user_account=$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd)
}

detect_dormant_user() {
    dormant_detected_user=()
    about_to_be_dormant_user=()
    dormant_email_log=()

    for user in $user_account; do
        lastlogin_raw=$(lastlog -u "$user" | awk 'NR==2')

        if [[ "$lastlogin_raw" == *"Never logged in"* ]]; then
            continue
        fi

        last_login_date=$(echo "$lastlogin_raw" | awk '{print $4, $5, $6}')

        if [[ -n "$last_login_date" ]]; then
            if last_login_ts=$(date -d "$last_login_date" +%s 2>/dev/null); then
                today_ts=$(date +%s)
                diff_days=$(( (today_ts - last_login_ts) / 86400 ))

                if [ "$diff_days" -eq $((DORMANT_USERACCOUNT_DURATION - 7)) ]; then
                    email=$(get_user_email "$user")
                    if [[ -n "$email" ]]; then
                        send_email_to_user "$user" "$email" "$diff_days"
                        dormant_email_log+=("Email sent to $user ($email)")
                    else
                        dormant_email_log+=("⚠️ No email found for $user")
                    fi
                    about_to_be_dormant_user+=("$user")
                fi

                if [ "$diff_days" -ge "$DORMANT_USERACCOUNT_DURATION" ]; then
                    dormant_detected_user+=("$user")
                fi
            fi
        fi
    done
}

check_password_expiry() {
    password_expired_user=()

    for user in $user_account; do
        last_change_line=$(chage -l "$user" 2>/dev/null | grep "Last password change")
        last_change_date=$(echo "$last_change_line" | awk -F: '{print $2}' | xargs)

        if [[ "$last_change_date" == "never" ]] || [[ -z "$last_change_date" ]]; then
            continue
        fi

        if last_change_ts=$(date -d "$last_change_date" +%s 2>/dev/null); then
            today_ts=$(date +%s)
            diff_days=$(( (today_ts - last_change_ts) / 86400 ))

            if [ "$diff_days" -ge "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
                password_expired_user+=("$user")
            fi
        fi
    done
}

generate_report() {
    REPORT_DIR="/dormant_reports"
    mkdir -p "$REPORT_DIR"

    human_readable_time=$(date "+%d %B %Y %H:%M")
    safe_filename_time=$(date "+%d_%b_%Y_%I-%M_%p")

    report_file="$REPORT_DIR/dormant_report_${safe_filename_time}.txt"

    {
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users & Password Expiry Report 📜"
        echo "Generated on: $human_readable_time"
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users 👥 (>= $DORMANT_USERACCOUNT_DURATION days)"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_detected_user[@]} -eq 0 ]; then
            echo "No dormant users found."
        else
            count=1
            for user in "${dormant_detected_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users Approaching Dormancy ⏳ (=$((DORMANT_USERACCOUNT_DURATION - 7)) days)"
        echo "---------------------------------------------------------------------------"

        if [ ${#about_to_be_dormant_user[@]} -eq 0 ]; then
            echo "No users approaching dormancy."
        else
            count=1
            for user in "${about_to_be_dormant_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users With Expired Passwords 🔒"
        echo "---------------------------------------------------------------------------"

        if [ ${#password_expired_user[@]} -eq 0 ]; then
            echo "No users with expired passwords."
        else
            count=1
            for user in "${password_expired_user[@]}"; do
                echo "$count. $user (password exceeded $DORMANT_PASSWORD_EXPIRY_DURATION days)"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Email Notifications Sent 📧"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_email_log[@]} -eq 0 ]; then
            echo "No email notifications were sent during this run."
        else
            for line in "${dormant_email_log[@]}"; do
                echo "$line"
            done
        fi

        echo "---------------------------------------------------------------------------"
    } > "$report_file"

    echo "Report generated at: $report_file"
}

# Run
check_user_account
detect_dormant_user
check_password_expiry
generate_report


Email set up + changes continuation (REMEMBER TO DO ALL THESE IN ROOT NOT DORMANT)

1. Go to ngrok's website and create an account
2. Go to "Setup & Installation" -> "Linux" -> "Apt" -> Follow the steps given (stop before "Deploy your app online")
4. Download flask if you have not:
   # apt update
   # apt install python3-pip -y (not sure if this is needed because it wasnt used(?). It was meant to be used to install flask but I used python3 in the end so...)
   # apt install python3-flask 
   # vim server.py (scripts are below)
   # python3 server.py
6. Open another terminal & run:
   # ngrok http 8080
7. A ngrok session will be shown
8. Copy the link at the "Forwarding" section (eg. "https://cc87d8decd23.ngrok-free.app")
9. Edit dormant.sh accordingly with updated script 
10. In dormant.sh, change your server-url to the forwarding link
11. run dormant.sh

TAKE NOTE: In order for you to test, you need a user that has 63 days of inactivity!! 
Run "togeneratelastlogin.py" until you get a user with 63 days of inactivity and you should be able to test out the email function.
In my opinion, the downside of ngrok is that its link will change everytime you start a session. Feel free to change anything I've done!
Do remember to CHANGE some of the parameters in the script accordingly & add your inactive user inside /etc/user_emails.conf if you haven't ~

server.py:
from flask import Flask, request
import os
import datetime

app = Flask(__name__)
OPT_IN_FILE = "/etc/dormant_opt_in.conf"

@app.route('/confirm')
def confirm():
    user = request.args.get('user')
    response = request.args.get('response')

    if response == "yes":
        now = datetime.datetime.now().strftime("%Y-%m-%d")
        with open("/etc/dormant_opt_in.conf", "a") as f:
            f.write(f"{user}={now}\n")
        return f"✅ Your account will remain active. Thank you, {user}!"

@app.route('/deactivate/<username>', methods=['GET'])
def deactivate_account(username):
    try:
        # Deactivate the user account
        subprocess.run(['usermod', '-L', username], check=True)
        subprocess.run(['usermod', '-s', '/sbin/nologin', username], check=True)
        # Log the action
        os.makedirs(os.path.dirname(DEACTIVATED_LOG), exist_ok=True)
        with open(DEACTIVATED_LOG, 'a') as f:
            f.write(f"{username} deactivated via email link.\n")

        return f"❌ Your account '{username}' has been deactivated as requested."
    except Exception as e:
        return f"⚠️ Failed to deactivate account '{username}': {e}"

@app.route('/')
def index():
    return "🛡️  Dormant Account Management Flask Server is running."

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)

dormant.sh (UPDATED v2):
#!/bin/bash

# Load configuration
source /etc/dormant.conf

# Email config file
EMAIL_CONFIG_FILE="/etc/user_emails.conf"
if [[ -f "$EMAIL_CONFIG_FILE" ]]; then
    source "$EMAIL_CONFIG_FILE"
fi

OPT_IN_FILE="/etc/dormant_opt_in.conf"
touch "$OPT_IN_FILE"

get_user_email() {
    local user=$1
    grep "^${user}=" "$EMAIL_CONFIG_FILE" 2>/dev/null | cut -d'=' -f2
}

send_email_to_user() {
    local user=$1
    local email=$2
    local days_inactive=$3
    local server_url="http://ngrok_url"  # Replace with actual ngrok/public IP

    local confirm_url="${server_url}/confirm?user=${user}&response=yes"
    local deny_url="${server_url}/confirm?user=${user}&response=no"

    local subject="⚠️ Your account will be deactivated in 7 days"
    local body="Hi $user,\n\nOur records show your account has been inactive for $days_inactive days.\n\nYour account will be deactivated in 7 days if no action is taken.\n\nWould you like to keep your account?\n\nYES: $confirm_url\nNO: $deny_url\n\nThank you."

    sendemail -f your_email@gmail.com \
              -t "$email" \
              -u "$subject" \
              -m "$body" \
              -s smtp.gmail.com:587 \
              -o tls=yes -xu your_email@gmail.com -xp your_app_password
}

# Validate config values
if [ -z "$DORMANT_USERACCOUNT_DURATION" ] || [ -z "$DORMANT_SERVICEACCOUNT_DURATION" ] || [ -z "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
    echo "Error: Config file missing required parameters."
    exit 1
fi

check_user_account() {
    user_account=$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd)
}

detect_dormant_user() {
    dormant_detected_user=()
    about_to_be_dormant_user=()
    dormant_email_log=()

    for user in $user_account; do
        # Check if user has opted in to keep account
        if grep -q "^$user=" "$OPT_IN_FILE"; then
            optin_date=$(grep "^$user=" "$OPT_IN_FILE" | cut -d= -f2)
            optin_ts=$(date -d "$optin_date" +%s 2>/dev/null)
            today_ts=$(date +%s)
            days_since_optin=$(( (today_ts - optin_ts) / 86400 ))

            if [ "$days_since_optin" -lt "$DORMANT_USERACCOUNT_DURATION" ]; then
                continue  # Skip user if they opted in recently
            fi
        fi

        lastlogin_raw=$(lastlog -u "$user" | awk 'NR==2')

        if [[ "$lastlogin_raw" == *"Never logged in"* ]]; then
            continue
        fi

        last_login_date=$(echo "$lastlogin_raw" | awk '{print $4, $5, $6}')

        if [[ -n "$last_login_date" ]]; then
            if last_login_ts=$(date -d "$last_login_date" +%s 2>/dev/null); then
                today_ts=$(date +%s)
                diff_days=$(( (today_ts - last_login_ts) / 86400 ))

                if [ "$diff_days" -eq $((DORMANT_USERACCOUNT_DURATION - 7)) ]; then
                    email=$(get_user_email "$user")
                    if [[ -n "$email" ]]; then
                        send_email_to_user "$user" "$email" "$diff_days"
                        dormant_email_log+=("Email sent to $user ($email)")
                    else
                        dormant_email_log+=("⚠️ No email found for $user")
                    fi
                    about_to_be_dormant_user+=("$user")
                fi

                if [ "$diff_days" -ge "$DORMANT_USERACCOUNT_DURATION" ]; then
                    dormant_detected_user+=("$user")
                fi
            fi
        fi
    done
}

check_password_expiry() {
    password_expired_user=()

    for user in $user_account; do
        last_change_line=$(chage -l "$user" 2>/dev/null | grep "Last password change")
        last_change_date=$(echo "$last_change_line" | awk -F: '{print $2}' | xargs)

        if [[ "$last_change_date" == "never" ]] || [[ -z "$last_change_date" ]]; then
            continue
        fi

        if last_change_ts=$(date -d "$last_change_date" +%s 2>/dev/null); then
            today_ts=$(date +%s)
            diff_days=$(( (today_ts - last_change_ts) / 86400 ))

            if [ "$diff_days" -ge "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
                password_expired_user+=("$user")
            fi
        fi
    done
}

generate_report() {
    REPORT_DIR="/dormant_reports"
    mkdir -p "$REPORT_DIR"

    human_readable_time=$(date "+%d %B %Y %H:%M")
    safe_filename_time=$(date "+%d_%b_%Y_%I-%M_%p")

    report_file="$REPORT_DIR/dormant_report_${safe_filename_time}.txt"

    {
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users & Password Expiry Report 📜"
        echo "Generated on: $human_readable_time"
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users 👥 (>= $DORMANT_USERACCOUNT_DURATION days)"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_detected_user[@]} -eq 0 ]; then
            echo "No dormant users found."
        else
            count=1
            for user in "${dormant_detected_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users Approaching Dormancy ⏳ (=$((DORMANT_USERACCOUNT_DURATION - 7)) days)"
        echo "---------------------------------------------------------------------------"

        if [ ${#about_to_be_dormant_user[@]} -eq 0 ]; then
            echo "No users approaching dormancy."
        else
            count=1
            for user in "${about_to_be_dormant_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users With Expired Passwords 🔒"
        echo "---------------------------------------------------------------------------"

        if [ ${#password_expired_user[@]} -eq 0 ]; then
            echo "No users with expired passwords."
        else
            count=1
            for user in "${password_expired_user[@]}"; do
                echo "$count. $user (password exceeded $DORMANT_PASSWORD_EXPIRY_DURATION days)"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Email Notifications Sent 📧"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_email_log[@]} -eq 0 ]; then
            echo "No email notifications were sent during this run."
        else
            for line in "${dormant_email_log[@]}"; do
                echo "$line"
            done
        fi

        echo "---------------------------------------------------------------------------"
    } > "$report_file"

    echo "Report generated at: $report_file"
}

# Run
check_user_account
detect_dormant_user
check_password_expiry
generate_report














change names 
#!/bin/bash

# Mapping of old usernames to new usernames
declare -A user_map=(
  [user01]=alicia.morris
  [user02]=daniel.james
  [user03]=sophie.reed
  [user04]=liam.wright
  [user05]=chloe.davis
  [user06]=ethan.cooper
  [user07]=mia.turner
  [user08]=joshua.lee
  [user09]=amelia.bennett
  [user10]=logan.bailey
  [user11]=olivia.mitchell
  [user12]=noah.hughes
  [user13]=ava.richards
  [user14]=harry.morris
  [user15]=ella.evans
  [user16]=jacob.wells
  [user17]=grace.webb
  [user18]=freddie.shaw
  [user19]=ruby.howard
  [user20]=leo.ward
  [user21]=emily.barker
  [user22]=oscar.simpson
  [user23]=lily.harrison
  [user24]=archie.brooks
  [user25]=isla.dixon
  [user26]=theo.morgan
  [user27]=millie.chapman
  [user28]=sebastian.bell
  [user29]=ivy.harvey
  [user30]=alfie.elliott
  [user31]=phoebe.knight
  [user32]=harvey.gray
  [user33]=rosie.hart
  [user34]=isaac.matthews
  [user35]=zara.fisher
  [user36]=mason.holmes
  [user37]=lottie.stone
  [user38]=harrison.clarke
  [user39]=maisie.cook
  [user40]=finley.gibson
  [user41]=nancy.murray
  [user42]=blake.ford
  [user43]=esme.bradley
  [user44]=leon.kerr
  [user45]=poppy.burton
  [user46]=felix.reynolds
  [user47]=flora.bates
  [user48]=ollie.hamilton
  [user49]=annabelle.page
  [user50]=reuben.nicholson
)

for old_user in "${!user_map[@]}"; do
  new_user="${user_map[$old_user]}"

  # Check if old user exists
  if id "$old_user" &>/dev/null; then
    echo "Renaming $old_user → $new_user"

    # Rename the user and move home directory
    sudo usermod -l "$new_user" -d "/home/$new_user" -m "$old_user"

    # Optional: update group name to match new user
    if getent group "$old_user" > /dev/null; then
      sudo groupmod -n "$new_user" "$old_user"
    fi
  else
    echo "⚠️  User $old_user not found. Skipping..."
  fi
done





alicia.morris=alicia.morris@mailinator.com
daniel.james=daniel.james@guerrillamail.com
sophie.reed=sophie.reed@temp-mail.org
liam.wright=liam.wright@dispostable.com
chloe.davis=chloe.davis@fakeinbox.com
ethan.cooper=ethan.cooper@mailinator.com
mia.turner=mia.turner@guerrillamail.com
joshua.lee=joshua.lee@temp-mail.org
amelia.bennett=amelia.bennett@dispostable.com
logan.bailey=logan.bailey@fakeinbox.com
olivia.mitchell=olivia.mitchell@mailinator.com
noah.hughes=noah.hughes@guerrillamail.com
ava.richards=ava.richards@temp-mail.org
harry.morris=harry.morris@dispostable.com
ella.evans=ella.evans@fakeinbox.com
jacob.wells=jacob.wells@mailinator.com
grace.webb=grace.webb@guerrillamail.com
freddie.shaw=freddie.shaw@temp-mail.org
ruby.howard=ruby.howard@dispostable.com
leo.ward=leo.ward@fakeinbox.com
emily.barker=emily.barker@mailinator.com
oscar.simpson=oscar.simpson@guerrillamail.com
lily.harrison=lily.harrison@temp-mail.org
archie.brooks=archie.brooks@dispostable.com
isla.dixon=isla.dixon@fakeinbox.com
theo.morgan=theo.morgan@mailinator.com
millie.chapman=millie.chapman@guerrillamail.com
sebastian.bell=sebastian.bell@temp-mail.org
ivy.harvey=ivy.harvey@dispostable.com
alfie.elliott=alfie.elliott@fakeinbox.com
phoebe.knight=phoebe.knight@mailinator.com
harvey.gray=harvey.gray@guerrillamail.com
rosie.hart=rosie.hart@temp-mail.org
isaac.matthews=isaac.matthews@dispostable.com
zara.fisher=zara.fisher@fakeinbox.com
mason.holmes=mason.holmes@mailinator.com
lottie.stone=lottie.stone@guerrillamail.com
harrison.clarke=harrison.clarke@temp-mail.org
maisie.cook=maisie.cook@dispostable.com
finley.gibson=finley.gibson@fakeinbox.com
nancy.murray=nancy.murray@mailinator.com
blake.ford=blake.ford@guerrillamail.com
esme.bradley=esme.bradley@temp-mail.org
leon.kerr=leon.kerr@dispostable.com
poppy.burton=poppy.burton@fakeinbox.com
felix.reynolds=felix.reynolds@mailinator.com
flora.bates=flora.bates@guerrillamail.com
ollie.hamilton=ollie.hamilton@temp-mail.org
annabelle.page=annabelle.page@dispostable.com
reuben.nicholson=reuben.nicholson@fakeinbox.com



[alicia.morris]=Alice Morris
[daniel.james]=Daniel James
[sophie.reed]=Sophie Reed
[liam.wright]=Liam Wright
[chloe.davis]=Chloe Davis
[ethan.cooper]=Ethan Cooper
[mia.turner]=Mia Turner
[joshua.lee]=Joshua Lee
[amelia.bennett]=Amelia Bennett
[logan.bailey]=Logan Bailey
[olivia.mitchell]=Olivia Mitchell
[noah.hughes]=Noah Hughes
[ava.richards]=Ava Richards
[harry.morris]=Harry Morris
[ella.evans]=Ella Evans
[jacob.wells]=Jacob Wells
[grace.webb]=Grace Webb
[freddie.shaw]=Freddie Shaw
[ruby.howard]=Ruby Howard
[leo.ward]=Leo Ward
[emily.barker]=Emily Barker
[oscar.simpson]=Oscar Simpson
[lily.harrison]=Lily Harrison
[archie.brooks]=Archie Brooks
[isla.dixon]=Isla Dixon
[theo.morgan]=Theo Morgan
[millie.chapman]=Millie Chapman
[sebastian.bell]=Sebastian Bell
[ivy.harvey]=Ivy Harvey
[alfie.elliott]=Alfie Elliott
[phoebe.knight]=Phoebe Knight
[harvey.gray]=Harvey Gray
[rosie.hart]=Rosie Hart
[isaac.matthews]=Isaac Matthews
[zara.fisher]=Zara Fisher
[mason.holmes]=Mason Holmes
[lottie.stone]=Lottie Stone
[harrison.clarke]=Harrison Clarke
[maisie.cook]=Maisie Cook
[finley.gibson]=Finley Gibson
[nancy.murray]=Nancy Murray
[blake.ford]=Blake Ford
[esme.bradley]=Esme Bradley
[leon.kerr]=Leon Kerr
[poppy.burton]=Poppy Burton
[felix.reynolds]=Felix Reynolds
[flora.bates]=Flora Bates
[ollie.hamilton]=Ollie Hamilton
[annabelle.page]=Annabelle Page
[reuben.nicholson]=Reuben Nicholson

display="${display_name_map[$new_user]}"
echo "Renamed $old_user to $new_user ($display)"


 input[type="password"] {
    width: 90%;
    margin: 0 auto 1.25rem auto; 
    display: block;
    padding: 0.75rem;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-size: 1rem;
  }

  input[type="submit"] {
    width: 90%;
    display: block;
    margin: 0 auto;
    padding: 0.75rem;
    background-color: #7c3aed;
    color: white;
    font-weight: bold;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }



#!/usr/bin/env python3
import os
import struct
import pwd
import time
import random

LASTLOG_PATH = "/var/log/lastlog"

# Only include normal users (e.g., UID >= 1000 and exclude system accounts)
MIN_UID = 1000

# Fetch all users
users = [u for u in pwd.getpwall() if u.pw_uid >= MIN_UID and u.pw_uid < 60000]

for pw in users:
    username = pw.pw_name
    uid = pw.pw_uid

    # Apply your login rules (you can change these as needed)
    if uid % 3 == 0:
        days_ago = random.randint(71, 100)
    elif uid % 5 == 0:
        days_ago = random.randint(31, 69)
    elif uid % 2 == 0:
        days_ago = random.randint(51, 70)
    else:
        days_ago = random.randint(1, 29)

    login_time = int(time.time() - days_ago * 86400)
    line = b"pts/0".ljust(32, b'\x00')
    host = b"localhost".ljust(256, b'\x00')

    # Structure: time (I), line (32s), host (256s)
    data = struct.pack("I32s256s", login_time, line, host)

    offset = uid * struct.calcsize("I32s256s")

    try:
        with open(LASTLOG_PATH, "r+b") as f:
            f.seek(offset)
            f.write(data)
        print(f"✅ Updated {username} (UID {uid}) to {days_ago} days ago.")
    except PermissionError:
        print(f"❌ Permission denied when updating {username}. Run as root.")
    except Exception as e:
        print(f"❌ Failed to update {username}: {e}")
