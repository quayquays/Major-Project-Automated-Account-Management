* CHANGES MADE TO dormant.sh:
- Added functions to send email + email format 
- Added function to see user accounts that are about to be dormant + emails that have been send under the generated report

FOLLOW THESE STEPS :
(scroll below to see all script(s) mentioned)

In Linux  :
# sudo -i (login as root)
# apt install sendemail
# apt install libio-socket-ssl-perl (this one may be optional as you only need it if you encounter an error with the email but you can just install it now)

In your own machine :
1. Go to your own google account
2. Enable 2 step verification
3. Go to App passwords
4. Create an App password (put any name you like)
5. Save the 16 letter code somewhere before closing (notes app)

In Linux :
(I do not think flask is needed as of now for the email to be sent so DO NOT COPY unless needed, I'm just putting it here for now)
# apt update
# apt install python3-pip -y (not sure if this is needed because it wasnt used(?). It was meant to be used to install flask but I used python3 in the end so...)
# apt install python3-flask 
# vim server.py 
# python3 server.py

(Copy this)
# vim /etc/user_emails.conf
* This email function ONLY works if the account is 7 DAYS before the dormancy period is up.
  This is because users are only given a week to respond before their accounts get deactivated.
  Ensure that the user account you are using to test the function is 7 days before deactivation. 
  (eg. dormancy period is 70 days and user01 & user02 are 63 days inactive)
Inside /etc/user_emails.conf :
user01=yuxuanpeck@gmail.com (replace with your own email)
user02=yuxuanpeck@gmail.com 
.
.
.

# vim dormant.sh
* After copy and pasting the script, do make the following changes to these parts :
- your_email@gmail.com -> replace with your own email aka sender account
- your_app_password -> replace with the app password that is from the sender account

 sendemail -f your_email@gmail.com \
              -t "$email" \
              -u "$subject" \
              -m "$body" \
              -s smtp.gmail.com:587 \
              -o tls=yes -xu your_email@gmail.com -xp your_app_password

* (talking about the script) The local server is supposedly linked to the flask tool but it is 
  technically not needed as I am not done with linking the response (yes/no functions) to the 
  deactivation of the account. I will be using another method to try and get the response to link 
  back to the Linux VM so just ignore that chunk of script!


dormant.sh (UPDATED):
#!/bin/bash

# Load configuration
source /etc/dormant.conf

# Email config file
EMAIL_CONFIG_FILE="/etc/user_emails.conf"
if [[ -f "$EMAIL_CONFIG_FILE" ]]; then
    source "$EMAIL_CONFIG_FILE"
fi

get_user_email() {
    local user=$1
    grep "^${user}=" "$EMAIL_CONFIG_FILE" 2>/dev/null | cut -d'=' -f2
}

send_email_to_user() {
    local user=$1
    local email=$2
    local days_inactive=$3
    local server_url="http://localhost:8080"  # Change to public IP or ngrok URL if needed

    local confirm_url="${server_url}/confirm?user=${user}&response=yes"
    local deny_url="${server_url}/confirm?user=${user}&response=no"

    local subject="⚠️ Your account will be deactivated in 7 days"
    local body="Hi $user,\n\nOur records show your account has been inactive for $days_inactive days.\n\nYour account will be deactivated in 7 days if no action is taken.\n\nWould you like to keep your account?\n\nYES: $confirm_url\nNO: $deny_url\n\nThank you."

    sendemail -f your_email@gmail.com \
              -t "$email" \
              -u "$subject" \
              -m "$body" \
              -s smtp.gmail.com:587 \
              -o tls=yes -xu your_email@gmail.com -xp your_app_password
}

# Validate config values
if [ -z "$DORMANT_USERACCOUNT_DURATION" ] || [ -z "$DORMANT_SERVICEACCOUNT_DURATION" ] || [ -z "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
    echo "Error: Config file missing required parameters."
    exit 1
fi

check_user_account() {
    user_account=$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd)
}

detect_dormant_user() {
    dormant_detected_user=()
    about_to_be_dormant_user=()
    dormant_email_log=()

    for user in $user_account; do
        lastlogin_raw=$(lastlog -u "$user" | awk 'NR==2')

        if [[ "$lastlogin_raw" == *"Never logged in"* ]]; then
            continue
        fi

        last_login_date=$(echo "$lastlogin_raw" | awk '{print $4, $5, $6}')

        if [[ -n "$last_login_date" ]]; then
            if last_login_ts=$(date -d "$last_login_date" +%s 2>/dev/null); then
                today_ts=$(date +%s)
                diff_days=$(( (today_ts - last_login_ts) / 86400 ))

                if [ "$diff_days" -eq $((DORMANT_USERACCOUNT_DURATION - 7)) ]; then
                    email=$(get_user_email "$user")
                    if [[ -n "$email" ]]; then
                        send_email_to_user "$user" "$email" "$diff_days"
                        dormant_email_log+=("Email sent to $user ($email)")
                    else
                        dormant_email_log+=("⚠️ No email found for $user")
                    fi
                    about_to_be_dormant_user+=("$user")
                fi

                if [ "$diff_days" -ge "$DORMANT_USERACCOUNT_DURATION" ]; then
                    dormant_detected_user+=("$user")
                fi
            fi
        fi
    done
}

check_password_expiry() {
    password_expired_user=()

    for user in $user_account; do
        last_change_line=$(chage -l "$user" 2>/dev/null | grep "Last password change")
        last_change_date=$(echo "$last_change_line" | awk -F: '{print $2}' | xargs)

        if [[ "$last_change_date" == "never" ]] || [[ -z "$last_change_date" ]]; then
            continue
        fi

        if last_change_ts=$(date -d "$last_change_date" +%s 2>/dev/null); then
            today_ts=$(date +%s)
            diff_days=$(( (today_ts - last_change_ts) / 86400 ))

            if [ "$diff_days" -ge "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
                password_expired_user+=("$user")
            fi
        fi
    done
}

generate_report() {
    REPORT_DIR="/dormant_reports"
    mkdir -p "$REPORT_DIR"

    human_readable_time=$(date "+%d %B %Y %H:%M")
    safe_filename_time=$(date "+%d_%b_%Y_%I-%M_%p")

    report_file="$REPORT_DIR/dormant_report_${safe_filename_time}.txt"

    {
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users & Password Expiry Report 📜"
        echo "Generated on: $human_readable_time"
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users 👥 (>= $DORMANT_USERACCOUNT_DURATION days)"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_detected_user[@]} -eq 0 ]; then
            echo "No dormant users found."
        else
            count=1
            for user in "${dormant_detected_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users Approaching Dormancy ⏳ (=$((DORMANT_USERACCOUNT_DURATION - 7)) days)"
        echo "---------------------------------------------------------------------------"

        if [ ${#about_to_be_dormant_user[@]} -eq 0 ]; then
            echo "No users approaching dormancy."
        else
            count=1
            for user in "${about_to_be_dormant_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users With Expired Passwords 🔒"
        echo "---------------------------------------------------------------------------"

        if [ ${#password_expired_user[@]} -eq 0 ]; then
            echo "No users with expired passwords."
        else
            count=1
            for user in "${password_expired_user[@]}"; do
                echo "$count. $user (password exceeded $DORMANT_PASSWORD_EXPIRY_DURATION days)"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Email Notifications Sent 📧"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_email_log[@]} -eq 0 ]; then
            echo "No email notifications were sent during this run."
        else
            for line in "${dormant_email_log[@]}"; do
                echo "$line"
            done
        fi

        echo "---------------------------------------------------------------------------"
    } > "$report_file"

    echo "Report generated at: $report_file"
}

# Run
check_user_account
detect_dormant_user
check_password_expiry
generate_report
