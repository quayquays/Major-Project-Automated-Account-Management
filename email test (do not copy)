IN DORMANT.SH :

get_user_email() {
    local username="$1"
    grep "^$username=" /etc/user_emails.conf | cut -d'=' -f2
}

send_email_to_user() {
    local user="$1"
    local user_email="$2"
    local inactive_days="$3"
    local server_url="http://yourserver"
    local deadline_date=$(date -d "+7 days" +"%Y-%m-%d")

    local html_file="/tmp/email_${user}.html"

    cat <<EOF > "$html_file"
<html>
<body>
<p>Hello ${user},</p>

<p>Your account has been inactive for <b>${inactive_days} days</b>. In 7 days, it will be deactivated unless you confirm to keep it.</p>

<p>
    <a href="${server_url}/confirm?user=${user}&response=yes" style="padding:10px 20px; background-color:green; color:white; text-decoration:none;">Yes, keep my account</a>
</p>
<p>
    <a href="${server_url}/confirm?user=${user}&response=no" style="padding:10px 20px; background-color:red; color:white; text-decoration:none;">No, deactivate my account</a>
</p>

<p>If you do not respond by <b>${deadline_date}</b>, your account will be automatically deactivated.</p>

</body>
</html>
EOF

    # Send the email using sendemail
    sendemail -f your@gmail.com -t "$user_email" \
    -u "⚠️ Action Required: Your Linux Account Is About to Expire" \
    -o message-content-type=html -o message-file="$html_file" \
    -s smtp.gmail.com:587 -o tls=yes -xu your@gmail.com -xp your_app_password
}


modify :
detect_dormant_user() {
    dormant_detected_user=()

    echo "---------------------------------------------------------------------------"
    echo "Last Login Summary 🧾"
    echo "---------------------------------------------------------------------------"

    for user in $user_account; do
        lastlogin_raw=$(lastlog -u "$user" | awk 'NR==2')

        if [[ "$lastlogin_raw" == *"Never logged in"* ]]; then
            echo "$user: Never logged in"
            continue
        fi

        last_login_date=$(echo "$lastlogin_raw" | awk '{print $4, $5, $6}')

        if [[ -n "$last_login_date" ]]; then
            if last_login_ts=$(date -d "$last_login_date" +%s 2>/dev/null); then
                today_ts=$(date +%s)
                diff_days=$(( (today_ts - last_login_ts) / 86400 ))

                # Print tabulated info
                printf "%-10s  Last login: %-15s  Inactive: %3d days\n" "$user" "$last_login_date" "$diff_days"

                # Email warning if exactly 7 days before dormancy threshold
                if [ "$diff_days" -eq $((DORMANT_USERACCOUNT_DURATION - 7)) ]; then
                    email=$(get_user_email "$user")
                    if [[ -n "$email" ]]; then
                        send_email_to_user "$user" "$email" "$diff_days"
                        echo "📧 Email sent to $user ($email)"
                    else
                        echo "⚠️  No email found for $user"
                    fi
                fi

                # If already dormant
                if [ "$diff_days" -ge "$DORMANT_USERACCOUNT_DURATION" ]; then
                    dormant_detected_user+=("$user")
                fi
            fi
        fi
    done

    echo "---------------------------------------------------------------------------"
}


# confirm_server.py
from flask import Flask, request
import subprocess

app = Flask(__name__)

@app.route('/confirm')
def confirm():
    user = request.args.get("user")
    response = request.args.get("response")

    if not user or not response:
        return "Invalid link", 400

    if response == "yes":
        # Just reset the dormancy manually (e.g., touch login timestamp file)
        with open("/var/dormant_responses.log", "a") as f:
            f.write(f"{user},YES\n")
        return f"✅ Your account will remain active. Thank you, {user}!"
    elif response == "no":
        subprocess.run(["sudo", "usermod", "--expiredate", "1", user])
        with open("/var/dormant_responses.log", "a") as f:
            f.write(f"{user},NO\n")
        return f"❌ Your account has been deactivated, {user}."
    else:
        return "Invalid response", 400

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=80)

apt install python3-flask



modified dormant.sh "detect_dormant_user" (v3) :
detect_dormant_user() {
    dormant_detected_user=()
    dormant_email_log=()

    for user in $user_account; do
        # Get last login info
        lastlogin_raw=$(lastlog -u "$user" | awk 'NR==2')
        if [[ "$lastlogin_raw" == *"Never logged in"* ]]; then
            continue
        fi

        last_login_date=$(echo "$lastlogin_raw" | awk '{print $4, $5, $6}')
        if [[ -n "$last_login_date" ]]; then
            if last_login_ts=$(date -d "$last_login_date" +%s 2>/dev/null); then
                today_ts=$(date +%s)
                diff_days=$(( (today_ts - last_login_ts) / 86400 ))

                # 🔔 Send email if 7 days before dormancy
                if [ "$diff_days" -eq $((DORMANT_USERACCOUNT_DURATION - 7)) ]; then
                    email=$(get_user_email "$user")
                    if [[ -n "$email" ]]; then
                        send_email_to_user "$user" "$email" "$diff_days"
                        dormant_email_log+=("Email sent to $user ($email)")
                    else
                        dormant_email_log+=("⚠️ No email found for $user")
                    fi
                fi

                # 🚫 Mark as dormant if past threshold
                if [ "$diff_days" -ge "$DORMANT_USERACCOUNT_DURATION" ]; then
                    dormant_detected_user+=("$user")
                fi
            fi
        fi
    done
}


detect_dormant_user() {
    dormant_detected_user=()
    dormant_email_log=()

    for user in $user_account; do
        lastlogin_raw=$(lastlog -u "$user" | awk 'NR==2')

        if [[ "$lastlogin_raw" == *"Never logged in"* ]]; then
            continue
        fi

        last_login_date=$(echo "$lastlogin_raw" | awk '{print $4, $5, $6}')

        if [[ -n "$last_login_date" ]]; then
            if last_login_ts=$(date -d "$last_login_date" +%s 2>/dev/null); then
                today_ts=$(date +%s)
                diff_days=$(( (today_ts - last_login_ts) / 86400 ))

                if [ "$diff_days" -eq $((DORMANT_USERACCOUNT_DURATION - 7)) ]; then
                    email=$(get_user_email "$user")
                    if [[ -n "$email" ]]; then
                        send_email_to_user "$user" "$email" "$diff_days"
                        dormant_email_log+=("Email sent to $user ($email)")
                    else
                        dormant_email_log+=("⚠️ No email found for $user")
                    fi
                fi

                if [ "$diff_days" -ge "$DORMANT_USERACCOUNT_DURATION" ]; then
                    dormant_detected_user+=("$user")
                fi
            fi
        fi
    done
}



#!/bin/bash

# Load configuration
source /etc/dormant.conf

# Email config file
EMAIL_CONFIG_FILE="/etc/user_email.conf"
if [[ -f "$EMAIL_CONFIG_FILE" ]]; then
    source "$EMAIL_CONFIG_FILE"
fi

get_user_email() {
    local user=$1
    grep "^${user}=" "$EMAIL_CONFIG_FILE" 2>/dev/null | cut -d'=' -f2
}

send_email_to_user() {
    local user=$1
    local email=$2
    local days_inactive=$3
    local server_url="http://localhost:8080"  # Change to public IP or ngrok URL if needed

    local confirm_url="${server_url}/confirm?user=${user}&response=yes"
    local deny_url="${server_url}/confirm?user=${user}&response=no"

    local subject="⚠️ Your account will be deactivated in 7 days"
    local body="Hi $user,\n\nOur records show your account has been inactive for $days_inactive days.\n\nYour account will be deactivated in 7 days if no action is taken.\n\nWould you like to keep your account?\n\nYES: $confirm_url\nNO: $deny_url\n\nThank you."

    sendemail -f your_email@gmail.com \
              -t "$email" \
              -u "$subject" \
              -m "$body" \
              -s smtp.gmail.com:587 \
              -o tls=yes -xu your_email@gmail.com -xp your_app_password
}

# Validate config values
if [ -z "$DORMANT_USERACCOUNT_DURATION" ] || [ -z "$DORMANT_SERVICEACCOUNT_DURATION" ] || [ -z "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
    echo "Error: Config file missing required parameters."
    exit 1
fi

check_user_account() {
    user_account=$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd)
}

detect_dormant_user() {
    dormant_detected_user=()
    dormant_email_log=()

    for user in $user_account; do
        lastlogin_raw=$(lastlog -u "$user" | awk 'NR==2')

        if [[ "$lastlogin_raw" == *"Never logged in"* ]]; then
            continue
        fi

        last_login_date=$(echo "$lastlogin_raw" | awk '{print $4, $5, $6}')

        if [[ -n "$last_login_date" ]]; then
            if last_login_ts=$(date -d "$last_login_date" +%s 2>/dev/null); then
                today_ts=$(date +%s)
                diff_days=$(( (today_ts - last_login_ts) / 86400 ))

                if [ "$diff_days" -eq $((DORMANT_USERACCOUNT_DURATION - 7)) ]; then
                    email=$(get_user_email "$user")
                    if [[ -n "$email" ]]; then
                        send_email_to_user "$user" "$email" "$diff_days"
                        dormant_email_log+=("Email sent to $user ($email)")
                    else
                        dormant_email_log+=("⚠️ No email found for $user")
                    fi
                fi

                if [ "$diff_days" -ge "$DORMANT_USERACCOUNT_DURATION" ]; then
                    dormant_detected_user+=("$user")
                fi
            fi
        fi
    done
}

check_password_expiry() {
    password_expired_user=()

    for user in $user_account; do
        last_change_line=$(chage -l "$user" 2>/dev/null | grep "Last password change")
        last_change_date=$(echo "$last_change_line" | awk -F: '{print $2}' | xargs)

        if [[ "$last_change_date" == "never" ]] || [[ -z "$last_change_date" ]]; then
            continue
        fi

        if last_change_ts=$(date -d "$last_change_date" +%s 2>/dev/null); then
            today_ts=$(date +%s)
            diff_days=$(( (today_ts - last_change_ts) / 86400 ))

            if [ "$diff_days" -ge "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
                password_expired_user+=("$user")
            fi
        fi
    done
}

generate_report() {
    REPORT_DIR="/dormant_reports"
    mkdir -p "$REPORT_DIR"

    human_readable_time=$(date "+%d %B %Y %H:%M")
    safe_filename_time=$(date "+%d_%b_%Y_%I-%M_%p")

    report_file="$REPORT_DIR/dormant_report_${safe_filename_time}.txt"

    {
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users & Password Expiry Report 📜"
        echo "Generated on: $human_readable_time"
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users 👥"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_detected_user[@]} -eq 0 ]; then
            echo "No dormant users found."
        else
            count=1
            for user in "${dormant_detected_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users With Expired Passwords 🔐"
        echo "---------------------------------------------------------------------------"

        if [ ${#password_expired_user[@]} -eq 0 ]; then
            echo "No users with expired passwords."
        else
            count=1
            for user in "${password_expired_user[@]}"; do
                echo "$count. $user (password exceeded $DORMANT_PASSWORD_EXPIRY_DURATION days)"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Email Notifications Sent 📮"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_email_log[@]} -eq 0 ]; then
            echo "No email notifications were sent during this run."
        else
            for line in "${dormant_email_log[@]}"; do
                echo "$line"
            done
        fi

        echo "---------------------------------------------------------------------------"
    } > "$report_file"

    echo "Report generated at: $report_file"
}

# Run
check_user_account
detect_dormant_user
check_password_expiry
generate_report




#!/bin/bash

# Load configuration
source /etc/dormant.conf

# Email config file
EMAIL_CONFIG_FILE="/etc/user_email.conf"
if [[ -f "$EMAIL_CONFIG_FILE" ]]; then
    source "$EMAIL_CONFIG_FILE"
fi

get_user_email() {
    local user=$1
    grep "^${user}=" "$EMAIL_CONFIG_FILE" 2>/dev/null | cut -d'=' -f2
}

send_email_to_user() {
    local user=$1
    local email=$2
    local days_inactive=$3
    local server_url="http://localhost:8080"  # Change to public IP or ngrok URL if needed

    local confirm_url="${server_url}/confirm?user=${user}&response=yes"
    local deny_url="${server_url}/confirm?user=${user}&response=no"

    local subject="⚠️ Your account will be deactivated in 7 days"
    local body="Hi $user,\n\nOur records show your account has been inactive for $days_inactive days.\n\nYour account will be deactivated in 7 days if no action is taken.\n\nWould you like to keep your account?\n\nYES: $confirm_url\nNO: $deny_url\n\nThank you."

    sendemail -f your_email@gmail.com \
              -t "$email" \
              -u "$subject" \
              -m "$body" \
              -s smtp.gmail.com:587 \
              -o tls=yes -xu your_email@gmail.com -xp your_app_password
}

# Validate config values
if [ -z "$DORMANT_USERACCOUNT_DURATION" ] || [ -z "$DORMANT_SERVICEACCOUNT_DURATION" ] || [ -z "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
    echo "Error: Config file missing required parameters."
    exit 1
fi

check_user_account() {
    user_account=$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd)
}

detect_dormant_user() {
    dormant_detected_user=()
    about_to_be_dormant_user=()
    dormant_email_log=()

    for user in $user_account; do
        lastlogin_raw=$(lastlog -u "$user" | awk 'NR==2')

        if [[ "$lastlogin_raw" == *"Never logged in"* ]]; then
            continue
        fi

        last_login_date=$(echo "$lastlogin_raw" | awk '{print $4, $5, $6}')

        if [[ -n "$last_login_date" ]]; then
            if last_login_ts=$(date -d "$last_login_date" +%s 2>/dev/null); then
                today_ts=$(date +%s)
                diff_days=$(( (today_ts - last_login_ts) / 86400 ))

                if [ "$diff_days" -eq $((DORMANT_USERACCOUNT_DURATION - 7)) ]; then
                    email=$(get_user_email "$user")
                    if [[ -n "$email" ]]; then
                        send_email_to_user "$user" "$email" "$diff_days"
                        dormant_email_log+=("Email sent to $user ($email)")
                    else
                        dormant_email_log+=("⚠️ No email found for $user")
                    fi
                    about_to_be_dormant_user+=("$user")
                fi

                if [ "$diff_days" -ge "$DORMANT_USERACCOUNT_DURATION" ]; then
                    dormant_detected_user+=("$user")
                fi
            fi
        fi
    done
}

check_password_expiry() {
    password_expired_user=()

    for user in $user_account; do
        last_change_line=$(chage -l "$user" 2>/dev/null | grep "Last password change")
        last_change_date=$(echo "$last_change_line" | awk -F: '{print $2}' | xargs)

        if [[ "$last_change_date" == "never" ]] || [[ -z "$last_change_date" ]]; then
            continue
        fi

        if last_change_ts=$(date -d "$last_change_date" +%s 2>/dev/null); then
            today_ts=$(date +%s)
            diff_days=$(( (today_ts - last_change_ts) / 86400 ))

            if [ "$diff_days" -ge "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
                password_expired_user+=("$user")
            fi
        fi
    done
}

generate_report() {
    REPORT_DIR="/dormant_reports"
    mkdir -p "$REPORT_DIR"

    human_readable_time=$(date "+%d %B %Y %H:%M")
    safe_filename_time=$(date "+%d_%b_%Y_%I-%M_%p")

    report_file="$REPORT_DIR/dormant_report_${safe_filename_time}.txt"

    {
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users & Password Expiry Report 📜"
        echo "Generated on: $human_readable_time"
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users 👥 (>= $DORMANT_USERACCOUNT_DURATION days)"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_detected_user[@]} -eq 0 ]; then
            echo "No dormant users found."
        else
            count=1
            for user in "${dormant_detected_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users Approaching Dormancy ⏳ (=$((DORMANT_USERACCOUNT_DURATION - 7)) days)"
        echo "---------------------------------------------------------------------------"

        if [ ${#about_to_be_dormant_user[@]} -eq 0 ]; then
            echo "No users approaching dormancy."
        else
            count=1
            for user in "${about_to_be_dormant_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users With Expired Passwords 🔒"
        echo "---------------------------------------------------------------------------"

        if [ ${#password_expired_user[@]} -eq 0 ]; then
            echo "No users with expired passwords."
        else
            count=1
            for user in "${password_expired_user[@]}"; do
                echo "$count. $user (password exceeded $DORMANT_PASSWORD_EXPIRY_DURATION days)"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Email Notifications Sent 📧"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_email_log[@]} -eq 0 ]; then
            echo "No email notifications were sent during this run."
        else
            for line in "${dormant_email_log[@]}"; do
                echo "$line"
            done
        fi

        echo "---------------------------------------------------------------------------"
    } > "$report_file"

    echo "Report generated at: $report_file"
}

# Run
check_user_account
detect_dormant_user
check_password_expiry
generate_report


DOWNLOAD ngrok
curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
  | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \
  && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
  | sudo tee /etc/apt/sources.list.d/ngrok.list \
  && sudo apt update \
  && sudo apt install ngrok


Set up:
ngrok config add-authtoken 2zaVISZP5xdArPzQfHDas4ANyUr_6Mrkjgm44njy289aiM3Ri


Update server.py:
@app.route('/keep/<username>', methods=['GET'])
def keep_account(username):
    with open('/etc/dormant_opt_in.conf', 'a') as f:
        f.write(f"{username}\n")
    return f"✅ Your account will remain active. Thank you, {username}!"



from flask import Flask
import os
import subprocess

app = Flask(__name__)
OPT_IN_FILE = "/etc/dormant_opt_in.conf"
DEACTIVATED_LOG = "/var/log/dormant_deactivated_users.log"

@app.route('/keep/<username>', methods=['GET'])
def keep_account(username):
    os.makedirs(os.path.dirname(OPT_IN_FILE), exist_ok=True)
    with open(OPT_IN_FILE, 'a') as f:
        f.write(f"{username}\n")
    return f"✅ Your account will remain active. Thank you, {username}!"

@app.route('/deactivate/<username>', methods=['GET'])
def deactivate_account(username):
    try:
        # Deactivate the user account
        subprocess.run(['usermod', '-L', username], check=True)
        subprocess.run(['usermod', '-s', '/sbin/nologin', username], check=True)

        # Log the action
        os.makedirs(os.path.dirname(DEACTIVATED_LOG), exist_ok=True)
        with open(DEACTIVATED_LOG, 'a') as f:
            f.write(f"{username} deactivated via email link.\n")

        return f"❌ Your account '{username}' has been deactivated as requested."
    except Exception as e:
        return f"⚠️ Failed to deactivate account '{username}': {e}"

@app.route('/')
def index():
    return "🛡️ Dormant Account Management Flask Server is running."

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)






from flask import Flask
import os
import datetime

app = Flask(__name__)
OPT_IN_FILE = "/etc/dormant_opt_in.conf"

@app.route('/keep/<username>', methods=['GET'])
def keep_account(username):
    os.makedirs(os.path.dirname(OPT_IN_FILE), exist_ok=True)
    now = datetime.datetime.now().strftime("%Y-%m-%d")
    with open(OPT_IN_FILE, 'a') as f:
        f.write(f"{username}={now}\n")
    return f"✅ Your account will remain active. Thank you, {username}!"












Update dormant.sh:
OPT_IN_FILE="/etc/dormant_opt_in.conf"
touch "$OPT_IN_FILE"

for user in $user_account; do
    # Skip if user opted in
    if grep -qx "$user" "$OPT_IN_FILE"; then
        continue
    fi

    # Existing dormant detection logic here...









if grep -q "^$user=" "$OPT_IN_FILE"; then
    optin_date=$(grep "^$user=" "$OPT_IN_FILE" | cut -d= -f2)
    optin_ts=$(date -d "$optin_date" +%s 2>/dev/null)
    today_ts=$(date +%s)
    days_since_optin=$(( (today_ts - optin_ts) / 86400 ))

    # If they opted in less than 70 days ago, skip them
    if [ "$days_since_optin" -lt "$DORMANT_USERACCOUNT_DURATION" ]; then
        continue
    fi
fi


#!/bin/bash

# Load configuration
source /etc/dormant.conf

# Email config file
EMAIL_CONFIG_FILE="/etc/user_emails.conf"
if [[ -f "$EMAIL_CONFIG_FILE" ]]; then
    source "$EMAIL_CONFIG_FILE"
fi

OPT_IN_FILE="/etc/dormant_opt_in.conf"
touch "$OPT_IN_FILE"

get_user_email() {
    local user=$1
    grep "^${user}=" "$EMAIL_CONFIG_FILE" 2>/dev/null | cut -d'=' -f2
}

send_email_to_user() {
    local user=$1
    local email=$2
    local days_inactive=$3
    local server_url="http://ngrok_url"  # Replace with actual ngrok/public IP

    local confirm_url="${server_url}/confirm?user=${user}&response=yes"
    local deny_url="${server_url}/confirm?user=${user}&response=no"

    local subject="⚠️ Your account will be deactivated in 7 days"
    local body="Hi $user,\n\nOur records show your account has been inactive for $days_inactive days.\n\nYour account will be deactivated in 7 days if no action is taken.\n\nWould you like to keep your account?\n\nYES: $confirm_url\nNO: $deny_url\n\nThank you."

    sendemail -f your_email@gmail.com \
              -t "$email" \
              -u "$subject" \
              -m "$body" \
              -s smtp.gmail.com:587 \
              -o tls=yes -xu your_email@gmail.com -xp your_app_password
}

# Validate config values
if [ -z "$DORMANT_USERACCOUNT_DURATION" ] || [ -z "$DORMANT_SERVICEACCOUNT_DURATION" ] || [ -z "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
    echo "Error: Config file missing required parameters."
    exit 1
fi

check_user_account() {
    user_account=$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd)
}

detect_dormant_user() {
    dormant_detected_user=()
    about_to_be_dormant_user=()
    dormant_email_log=()

    for user in $user_account; do
        # Check if user has opted in to keep account
        if grep -q "^$user=" "$OPT_IN_FILE"; then
            optin_date=$(grep "^$user=" "$OPT_IN_FILE" | cut -d= -f2)
            optin_ts=$(date -d "$optin_date" +%s 2>/dev/null)
            today_ts=$(date +%s)
            days_since_optin=$(( (today_ts - optin_ts) / 86400 ))

            if [ "$days_since_optin" -lt "$DORMANT_USERACCOUNT_DURATION" ]; then
                continue  # Skip user if they opted in recently
            fi
        fi

        lastlogin_raw=$(lastlog -u "$user" | awk 'NR==2')

        if [[ "$lastlogin_raw" == *"Never logged in"* ]]; then
            continue
        fi

        last_login_date=$(echo "$lastlogin_raw" | awk '{print $4, $5, $6}')

        if [[ -n "$last_login_date" ]]; then
            if last_login_ts=$(date -d "$last_login_date" +%s 2>/dev/null); then
                today_ts=$(date +%s)
                diff_days=$(( (today_ts - last_login_ts) / 86400 ))

                if [ "$diff_days" -eq $((DORMANT_USERACCOUNT_DURATION - 7)) ]; then
                    email=$(get_user_email "$user")
                    if [[ -n "$email" ]]; then
                        send_email_to_user "$user" "$email" "$diff_days"
                        dormant_email_log+=("Email sent to $user ($email)")
                    else
                        dormant_email_log+=("⚠️ No email found for $user")
                    fi
                    about_to_be_dormant_user+=("$user")
                fi

                if [ "$diff_days" -ge "$DORMANT_USERACCOUNT_DURATION" ]; then
                    dormant_detected_user+=("$user")
                fi
            fi
        fi
    done
}

check_password_expiry() {
    password_expired_user=()

    for user in $user_account; do
        last_change_line=$(chage -l "$user" 2>/dev/null | grep "Last password change")
        last_change_date=$(echo "$last_change_line" | awk -F: '{print $2}' | xargs)

        if [[ "$last_change_date" == "never" ]] || [[ -z "$last_change_date" ]]; then
            continue
        fi

        if last_change_ts=$(date -d "$last_change_date" +%s 2>/dev/null); then
            today_ts=$(date +%s)
            diff_days=$(( (today_ts - last_change_ts) / 86400 ))

            if [ "$diff_days" -ge "$DORMANT_PASSWORD_EXPIRY_DURATION" ]; then
                password_expired_user+=("$user")
            fi
        fi
    done
}

generate_report() {
    REPORT_DIR="/dormant_reports"
    mkdir -p "$REPORT_DIR"

    human_readable_time=$(date "+%d %B %Y %H:%M")
    safe_filename_time=$(date "+%d_%b_%Y_%I-%M_%p")

    report_file="$REPORT_DIR/dormant_report_${safe_filename_time}.txt"

    {
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users & Password Expiry Report 📜"
        echo "Generated on: $human_readable_time"
        echo "---------------------------------------------------------------------------"
        echo "Dormant Users 👥 (>= $DORMANT_USERACCOUNT_DURATION days)"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_detected_user[@]} -eq 0 ]; then
            echo "No dormant users found."
        else
            count=1
            for user in "${dormant_detected_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users Approaching Dormancy ⏳ (=$((DORMANT_USERACCOUNT_DURATION - 7)) days)"
        echo "---------------------------------------------------------------------------"

        if [ ${#about_to_be_dormant_user[@]} -eq 0 ]; then
            echo "No users approaching dormancy."
        else
            count=1
            for user in "${about_to_be_dormant_user[@]}"; do
                echo "$count. $user"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Users With Expired Passwords 🔒"
        echo "---------------------------------------------------------------------------"

        if [ ${#password_expired_user[@]} -eq 0 ]; then
            echo "No users with expired passwords."
        else
            count=1
            for user in "${password_expired_user[@]}"; do
                echo "$count. $user (password exceeded $DORMANT_PASSWORD_EXPIRY_DURATION days)"
                ((count++))
            done
        fi

        echo "---------------------------------------------------------------------------"
        echo "Email Notifications Sent 📧"
        echo "---------------------------------------------------------------------------"

        if [ ${#dormant_email_log[@]} -eq 0 ]; then
            echo "No email notifications were sent during this run."
        else
            for line in "${dormant_email_log[@]}"; do
                echo "$line"
            done
        fi

        echo "---------------------------------------------------------------------------"
    } > "$report_file"

    echo "Report generated at: $report_file"
}

# Run
check_user_account
detect_dormant_user
check_password_expiry
generate_report



@app.route('/confirm')
def confirm():
    user = request.args.get('user')
    response = request.args.get('response')

    if response == "yes":
        now = datetime.datetime.now().strftime("%Y-%m-%d")
        with open("/etc/dormant_opt_in.conf", "a") as f:
            f.write(f"{user}={now}\n")
        return f"✅ Your account will remain active. Thank you, {user}!"


